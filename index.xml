<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>brk3.github.io</title>
    <link>https://brk3.github.io/</link>
    <description>brk3.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Apr 2023 12:32:30 +0100</lastBuildDate>
    
    <atom:link href="https://brk3.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AKS Authentication with Golang</title>
      <link>https://brk3.github.io/posts/golang-aks-auth/</link>
      <pubDate>Tue, 25 Apr 2023 12:32:30 +0100</pubDate>
      
      <guid>https://brk3.github.io/posts/golang-aks-auth/</guid>
      <description>&lt;h1 id=&#34;overview&#34; &gt;Overview
&lt;span&gt;
    &lt;a href=&#34;#overview&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;Recently I&amp;rsquo;ve needed to interact with Azure Kubernetes Service (AKS) using golang. This isn&amp;rsquo;t hard,
but what complicates matters somewhat is when the cluster is AAD enabled.&lt;/p&gt;
&lt;p&gt;In this case the general advice is to use &lt;a href=&#34;https://github.com/Azure/kubelogin&#34;&gt;kubelogin&lt;/a&gt;. In the
past I&amp;rsquo;ve shelled out to &lt;code&gt;kubelogin&lt;/code&gt; from my golang code, and this works fine. However, we should be
able to do this in native golang without the dependencies on external tools.&lt;/p&gt;
&lt;p&gt;The requirements I came up with are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow use of various auth methods, in particular azcli and system assigned managed identity.&lt;/li&gt;
&lt;li&gt;Doesn&amp;rsquo;t require a kubeconfig to be present on the host.&lt;/li&gt;
&lt;li&gt;Doesn&amp;rsquo;t require persisting the kubeconfig to the host.&lt;/li&gt;
&lt;li&gt;Uses native and non deprecated sdks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;even-too-hard-for-chatgpt&#34; &gt;Even too hard for ChatGPT?!
&lt;span&gt;
    &lt;a href=&#34;#even-too-hard-for-chatgpt&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;Surprisingly, I wasn&amp;rsquo;t able to find any good stock examples of this online. I assume they have to be
out there, but either my Google-fu is coming up short or I&amp;rsquo;m missing something obvious! Even ChatGPT
was spewing non working examples and insisted on using the deprecated
&lt;a href=&#34;https://github.com/Azure/go-autorest&#34;&gt;go-autorest&lt;/a&gt;. After splunking through the docs I finally
managed to get a working example, which I&amp;rsquo;m posting here for future use.&lt;/p&gt;
&lt;h1 id=&#34;process&#34; &gt;Process
&lt;span&gt;
    &lt;a href=&#34;#process&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;From a high level, the process to obtain an authorized k8s client is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an authenticated Azure client&lt;/li&gt;
&lt;li&gt;Fetch a client for the container service&lt;/li&gt;
&lt;li&gt;Fetch the kubeconfig&lt;/li&gt;
&lt;li&gt;Fetch an AAD bearer token&lt;/li&gt;
&lt;li&gt;Replace the exec plugin details with the token in the kubeconfig&lt;/li&gt;
&lt;li&gt;Finally, create a k8s client using the kubeconfig&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The full code for this can be found
&lt;a href=&#34;https://gist.github.com/brk3/0f263edeb0eb842a7d1ace45fb50b150&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to replace coredns with kube-dns</title>
      <link>https://brk3.github.io/posts/kubeadm-dns/</link>
      <pubDate>Thu, 21 Mar 2019 12:01:43 +0000</pubDate>
      
      <guid>https://brk3.github.io/posts/kubeadm-dns/</guid>
      <description>&lt;p&gt;CoreDNS is the default DNS addon in Kubernetes since 1.13. I recently needed to switch back to
kube-dns for some testing, and it wasn&amp;rsquo;t obvious from the documentation how to do that. Here&amp;rsquo;s how I
went about it for reference.&lt;/p&gt;
&lt;p&gt;These steps assume kubeadm 1.13.&lt;/p&gt;
&lt;h2 id=&#34;steps&#34; &gt;Steps
&lt;span&gt;
    &lt;a href=&#34;#steps&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;First, initialise the master node, skipping the coredns addon phase:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubeadm init --pod-network-cidr=10.244.0.0/16 --skip-phases=addon/coredns
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then prepare a kubeadm override config to specify kube-dns is to be used instead of the default:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat &amp;gt; kubeadm-kube-dns.yaml &amp;lt;&amp;lt; EOF
apiVersion: kubeadm.k8s.io/v1beta1
kind: ClusterConfiguration
dns:
    type: &amp;#34;kube-dns&amp;#34;
    imageRepository: myregistry:5000
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This example also shows how to use a custom repository for the images.&lt;/p&gt;
&lt;p&gt;Now init the addon:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubeadm init phase addon coredns --config=kubeadm-kube-dns.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, add your CNI addon of choice to finish setting up the master:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s it. I also found the following steps from &lt;a href=&#34;https://www.ibm.com/support/knoawledgecenter/en/SSYGQH_6.0.0/admin/install/cp_prereq_kubernetes_dns.html&#34;&gt;IBM&lt;/a&gt; useful to verify the DNS is sane (remember to
add a k8s worker before proceeding with this):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl create -f https://k8s.io/examples/admin/dns/busybox.yaml
kubectl exec -ti busybox -- nslookup kubernetes.default
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Deploying virtual baremetal with Ironic &amp; Kolla</title>
      <link>https://brk3.github.io/posts/kolla-ironic-libvirt/</link>
      <pubDate>Thu, 19 Apr 2018 12:46:12 +0100</pubDate>
      
      <guid>https://brk3.github.io/posts/kolla-ironic-libvirt/</guid>
      <description>&lt;p&gt;A common barrier to entry when looking to try out OpenStack Ironic is that you need a baremetal
machine to use with it. It turns out that it is possible to use a virtual machine in lieu of
baremetal, and this is exactly what tools such as devstack and tripleo allow for.
This guide details how the same setup can be done using Kolla. Given the complexity of Ironic and
the variety of configurations possible, almost every step will have a multitude of variations and
possibilities, I just detail what worked for me.&lt;/p&gt;
&lt;h1 id=&#34;setup&#34; &gt;Setup
&lt;span&gt;
    &lt;a href=&#34;#setup&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;h2 id=&#34;libvirt&#34; &gt;libvirt
&lt;span&gt;
    &lt;a href=&#34;#libvirt&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;My host node is using the default libvirt network, which is 192.168.0.0/24. Attached to virbr0, I
have the standard set of nodes required to deploy a multinode OpenStack using Kolla. In addition, I
have created an extra guest to act as the baremetal, named &amp;lsquo;virtual-baremetal&amp;rsquo;. There&amp;rsquo;s nothing
special about the VM but the XML is posted &lt;a href=&#34;https://gist.github.com/brk3/7fbb76f727de6bf7faeb2be1c1c5766f&#34;&gt;here&lt;/a&gt; for reference.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ virsh list
 Id    Name                  State
------------------------------------
 95    operator              running
 96    control01             running
 97    control02             running
 98    control03             running
 101   network01             running
 102   network02             running
 103   compute01             running
 104   compute02             running
 105   storage01             running
 106   storage02             running
 123   storage03             running
 128   virtual-baremetal     shut off
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Each node has 4 NICs, I also grabbed the following snippet from the Ironic devstack scripts to allow
VNC access to the console:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;graphics type=&amp;#39;vnc&amp;#39; port=&amp;#39;-1&amp;#39; autoport=&amp;#39;yes&amp;#39; listen=&amp;#39;0.0.0.0&amp;#39;&amp;gt;
  &amp;lt;listen type=&amp;#39;address&amp;#39; address=&amp;#39;0.0.0.0&amp;#39;/&amp;gt;
&amp;lt;/graphics&amp;gt;
&amp;lt;video&amp;gt;
  &amp;lt;model type=&amp;#39;cirrus&amp;#39; vram=&amp;#39;16384&amp;#39; heads=&amp;#39;1&amp;#39; primary=&amp;#39;yes&amp;#39;/&amp;gt;
  &amp;lt;address type=&amp;#39;pci&amp;#39; domain=&amp;#39;0x0000&amp;#39; bus=&amp;#39;0x00&amp;#39; slot=&amp;#39;0x02&amp;#39; function=&amp;#39;0x0&amp;#39;/&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This proved to be valuable when debugging as the PXE boot process doesn&amp;rsquo;t appear to attach to the
same console as exposed by &amp;lsquo;virsh console&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Because I&amp;rsquo;m using flat networking, I needed to disable DHCP from the libvirt network to prevent it
from trying to intercept boot requests from the Ironic target. To do this you can either remove the
&amp;lt;dhcp&amp;gt; element from the network XML, or in my case, I just killed the libvirt managed dnsmasq
processes completely and ran my own for extra control.&lt;/p&gt;
&lt;h2 id=&#34;vbmc&#34; &gt;vbmc
&lt;span&gt;
    &lt;a href=&#34;#vbmc&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;On the host node we need to setup a virtual baseboard management controller (BMC) to allow Ironic to
control the node. This can be accomplished using vbmc:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yum install python-pip python-devel libvirt-devel gcc
pip install virtualbmc
vbmc add virtual-baremetal --port 6230 --username admin --password password --address 0.0.0.0
vbmc start --libvirt-uri=qemu:///session virtual-baremetal
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use ipmitool to verify it&amp;rsquo;s working:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ipmitool -I lanplus -H &amp;lt;host node ip&amp;gt; -L ADMINISTRATOR -p 6230 \
  -U admin -R 12 -N 5 -P password power status
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;deploy&#34; &gt;Deploy
&lt;span&gt;
    &lt;a href=&#34;#deploy&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;At this point you can follow the standard Ironic steps as outlined in the Kolla &lt;a href=&#34;https://docs.openstack.org/kolla-ansible/latest/reference/ironic-guide.html&#34;&gt;documentation&lt;/a&gt;
to create kernel/ramdisk images, associate a port, and finally boot the baremetal node.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging Murano with Kolla</title>
      <link>https://brk3.github.io/posts/debugging-murano-with-kolla/</link>
      <pubDate>Thu, 15 Jun 2017 16:31:32 +0100</pubDate>
      
      <guid>https://brk3.github.io/posts/debugging-murano-with-kolla/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://docs.openstack.org/developer/kolla-ansible/&#34;&gt;kolla-ansible&lt;/a&gt; project recently gained support for hacking on the
OpenStack services it deploys, much the same as devstack.&lt;/p&gt;
&lt;p&gt;Services are being added as we go, so it&amp;rsquo;s unlikely all will be supported for
the Pike release. That said it&amp;rsquo;s quite easy to add support for new projects, so
if the one you&amp;rsquo;re interested in isn&amp;rsquo;t there yet have a go!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using this for the past month or so to submit patches into the Murano
project, and wanted to give a short overview of how Kolla can be used to do
this.&lt;/p&gt;
&lt;h2 id=&#34;enabling&#34; &gt;Enabling
&lt;span&gt;
    &lt;a href=&#34;#enabling&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Start by enabling dev mode for the project(s) you&amp;rsquo;re interested in within
/etc/kolla/globals.yml:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;murano_dev_mode: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then either deploy the project:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kolla-ansible deploy --tags murano
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or reconfigure it if it&amp;rsquo;s already been deployed:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kolla-ansible reconfigure --tags murano
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Kolla will clone the source code for the project under &lt;em&gt;&amp;rsquo;/opt/stack&amp;rsquo;&lt;/em&gt;, and bind
mount it into the container. The benefit of this is that you can use local
development tools, your favorite editor, etc. right from the node instead of
having to install them all into the container. Also if the container happens to
go into an error state or gets destroyed you don&amp;rsquo;t lose your changes.&lt;/p&gt;
&lt;h2 id=&#34;debugging&#34; &gt;Debugging
&lt;span&gt;
    &lt;a href=&#34;#debugging&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Working on the code is as easy as making some changes to the local code, and
restarting the container. Logs are available under
&lt;em&gt;&amp;rsquo;/var/lib/docker/volumes/kolla_logs/_data/murano&amp;rsquo;&lt;/em&gt;, and can be
tailed/grepped from a separate terminal.&lt;/p&gt;
&lt;p&gt;To actually debug the code, I&amp;rsquo;ve found &lt;a href=&#34;https://pypi.python.org/pypi/remote-pdb&#34;&gt;remote_pdb&lt;/a&gt; to be very effective.
We currently don&amp;rsquo;t include this in the Docker images but it can be installed
easily:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker exec -it -u root murano_api pip install remote_pdb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Set a break point as follows:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from remote_pdb import RemotePdb
RemotePdb(&amp;#39;127.0.0.1&amp;#39;, 4444).set_trace()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Restart the container, and attach to pdb using:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;socat readline tcp:127.0.0.1:4444
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;summary&#34; &gt;Summary
&lt;span&gt;
    &lt;a href=&#34;#summary&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;One of the best things about using Kolla is it&amp;rsquo;s &amp;ldquo;don&amp;rsquo;t touch the host where at
all possible&amp;rdquo; mantra. This is one area where I find it really surpasses
devstack, as deploys can quickly be torn down with confidence that nothing will
be left behind. This leads to more repeatable patches, testing, and less &amp;ldquo;works
on my machine&amp;rdquo; code.&lt;/p&gt;
&lt;p&gt;Give it a try, and feel free to ask questions in &lt;a href=&#34;https://kiwiirc.com/client/irc.freenode.net/#openstack-kolla&#34;&gt;#openstack-kolla&lt;/a&gt; on freenode.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Importing albums from Google Music to Spotify</title>
      <link>https://brk3.github.io/posts/gmusic-to-spotify/</link>
      <pubDate>Fri, 26 May 2017 10:56:50 +0100</pubDate>
      
      <guid>https://brk3.github.io/posts/gmusic-to-spotify/</guid>
      <description>&lt;p&gt;I recently switched from Google Music to Spotify, and wanted to import all the various albums I&amp;rsquo;ve
added to my library over the years. As of writing all current methods I found didn&amp;rsquo;t work,
thankfully Spotify have a really nice API which makes this quite straight forward.  You can find the
script I put together at &lt;a href=&#34;https://github.com/brk3/gmusic-to-spotify&#34;&gt;https://github.com/brk3/gmusic-to-spotify&lt;/a&gt;, here&amp;rsquo;s a quick overview how to
use it.&lt;/p&gt;
&lt;p&gt;You need to acquire api keys (&lt;a href=&#34;https://developer.spotify.com/my-applications/#!/applications)&#34;&gt;https://developer.spotify.com/my-applications/#!/applications)&lt;/a&gt;, and
plug these in. Next you need to generate a simple csv key/value list of your albums in the form of
&amp;lsquo;artist, album&amp;rsquo;. There is a very useful piece of javascript for this being maintained over at
&lt;a href=&#34;https://gist.github.com/jmiserez/c9a9a0f41e867e5ebb75&#34;&gt;https://gist.github.com/jmiserez/c9a9a0f41e867e5ebb75&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After that you can let it run, if it finds multiple sources for an album (e.g. explicit vs. edited
versions), it will list links to the albums that you can inspect before choosing which one to add.
For large libraries this happens quite a bit, in my experience the first choice in the list is
usually best.&lt;/p&gt;
&lt;p&gt;Hope it helps!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nested Xen</title>
      <link>https://brk3.github.io/posts/nested-hvm-xen/</link>
      <pubDate>Wed, 18 Jan 2017 16:47:06 +0000</pubDate>
      
      <guid>https://brk3.github.io/posts/nested-hvm-xen/</guid>
      <description>&lt;p&gt;As part of efforts to more regularly test the Xen hypervisor with Nova as part of OpenStack
development, I&amp;rsquo;m spending some time figuring out how to virtualise Xen on Xen, specifically Oracle&amp;rsquo;s
&lt;a href=&#34;https://www.oracle.com/virtualization/vm-server-for-x86/index.html&#34;&gt;Oracle VM Server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In virtualisation terms the different levels of hypervisor are referred to as &lt;em&gt;LN&lt;/em&gt;, where N is the
&lt;a href=&#34;https://wiki.xenproject.org/wiki/Nested_Virtualization_in_Xen#Introduction&#34;&gt;nesting level&lt;/a&gt;. In our setup, Oracle VM Server 3.4.2 (OVM-S) is running on baremetal as &lt;em&gt;L0&lt;/em&gt;,
another instance of OVM-S is running on that as &lt;em&gt;L1&lt;/em&gt;, and the final OpenStack instantiated guest
would be &lt;em&gt;L2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are not so many blogs or up to date howtos in this area, so most of the below comes direct
from the official &lt;a href=&#34;https://xenbits.xen.org/docs/unstable/man/xl.cfg.5.html&#34;&gt;Xen documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, we&amp;rsquo;re using the xenlight (xl) toolkit, as of yet I have not found how to enable the relevant
parameters in libvirt to make nesting work.&lt;/p&gt;
&lt;p&gt;Starting from &lt;em&gt;L0&lt;/em&gt;, here is an example &lt;em&gt;xl&lt;/em&gt; guest config file:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;builder = &amp;#34;hvm&amp;#34;
name = &amp;#34;example&amp;#34;
memory = 4096
vcpus = 2
vif = [ &amp;#39;bridge=xenbr0&amp;#39; ]
disk = [ &amp;#39;format=raw, vdev=hda, access=rw, target=/root/disk.img&amp;#39;, &amp;#39;format=raw, vdev=hdc, access=ro, devtype=cdrom, target=/root/V789846-01.iso&amp;#39; ]
vnc = 1
vnclisten=&amp;#34;0.0.0.0&amp;#34;
hap=1
nestedhvm=1
cpuid = [&amp;#39;0x1:ecx=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is copied directly from &lt;em&gt;/etc/xen/xlexample.hvm&lt;/em&gt;, with minor tweaks for disks and networking.
The sample files are a good place to start as the above example will almost certainly be out of date
in time.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using bridged &lt;a href=&#34;https://wiki.xenproject.org/wiki/Xen_Networking&#34;&gt;networking&lt;/a&gt;, &lt;em&gt;xenbr0&lt;/em&gt; was created in the usual way with the hosts default
interface added to it.&lt;/p&gt;
&lt;p&gt;The last three &lt;a href=&#34;https://wiki.xenproject.org/wiki/Nested_Virtualization_in_Xen#Quick-start_guide&#34;&gt;lines&lt;/a&gt; are the important pieces, without these &lt;em&gt;L1&lt;/em&gt; will fail to install with the
following error:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;libxl__domain_make domain creation fail: cannot make domain: -3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once logged into &lt;em&gt;L1&lt;/em&gt;, an image can be booted for &lt;em&gt;L2&lt;/em&gt;. In an OpenStack environment Nova will be
managing this step. To verify it&amp;rsquo;s working however, we can boot Cirros in Xen using the following
config:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;builder = &amp;#34;hvm&amp;#34;
name = &amp;#34;example.hvm&amp;#34;
memory = 128
vcpus = 2
vif = [ &amp;#39;xenbr0&amp;#39; ]
disk = [ &amp;#39;/root/cirros.img,qcow2,xvda&amp;#39; ]
vnc = 1
vnclisten=&amp;#34;0.0.0.0&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;todo&#34; &gt;TODO
&lt;span&gt;
    &lt;a href=&#34;#todo&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I will continue to update this post in time as I make improvements to this process. In particular, I
would like to solve the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set the required nesting params via libvirt, so that we aren&amp;rsquo;t forced to use xl.&lt;/li&gt;
&lt;li&gt;Install using console rather than VNC.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Libvirt DNS</title>
      <link>https://brk3.github.io/posts/libvirt-dns/</link>
      <pubDate>Mon, 09 Jan 2017 12:26:42 +0000</pubDate>
      
      <guid>https://brk3.github.io/posts/libvirt-dns/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s some short notes on how to configure DNS for libvirt managed VMs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a libvirt network, and add the following to it&amp;rsquo;s XML:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;network&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;domain&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my.domain.local&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/network&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Ensure the instance has DHCP_HOSTNAME set in network-scripts. I use virt-edit to do this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;virt-edit &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -d $name &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    /etc/sysconfig/network-scripts/ifcfg-eth0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^DHCP_HOSTNAME=.*/DHCP_HOSTNAME=&amp;#34;&amp;#39;&lt;/span&gt;$name&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;/&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(above is taken from &lt;a href=&#34;https://gist.github.com/brk3/8d029adf03fbfcd5b69f473cea451355&#34;&gt;https://gist.github.com/brk3/8d029adf03fbfcd5b69f473cea451355&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure the gateway is available as a nameserver in /etc/resolv.conf:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nameserver 192.168.4.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s it, VMs should be pingable/contactable via their hostnames from the host.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Hugo</title>
      <link>https://brk3.github.io/posts/how-to-hugo/</link>
      <pubDate>Fri, 06 Jan 2017 17:15:03 +0000</pubDate>
      
      <guid>https://brk3.github.io/posts/how-to-hugo/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s how to publish new posts on this blog using Hugo.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install hugo (via apt or from &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Setup the repo&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone -b source git@github.com:brk3/brk3.github.io.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Create a new post&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new post/how-to-hugo.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;edit&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -av
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Republish the site&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout master
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp -r public/* .  &lt;span style=&#34;color:#75715e&#34;&gt;# Note, this will not show changes in the index!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Regenerate Site&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push --all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://brk3.github.io/posts/hello-world/</link>
      <pubDate>Thu, 01 Dec 2016 14:13:31 +0000</pubDate>
      
      <guid>https://brk3.github.io/posts/hello-world/</guid>
      <description>&lt;p&gt;Hello World!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
